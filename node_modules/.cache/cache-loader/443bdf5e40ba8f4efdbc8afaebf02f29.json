{"remainingRequest":"C:\\Users\\chris\\Desktop\\aileron\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\chris\\Desktop\\aileron\\node_modules\\eslint-loader\\index.js??ref--18-0!C:\\Users\\chris\\Desktop\\aileron\\src\\main.js","dependencies":[{"path":"C:\\Users\\chris\\Desktop\\aileron\\src\\main.js","mtime":1522769916962},{"path":"C:\\Users\\chris\\Desktop\\aileron\\package.json","mtime":1522176194972},{"path":"C:\\Users\\chris\\Desktop\\aileron\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1520545180302},{"path":"C:\\Users\\chris\\Desktop\\aileron\\node_modules\\babel-loader\\lib\\index.js","mtime":1519636541000},{"path":"C:\\Users\\chris\\Desktop\\aileron\\node_modules\\eslint-loader\\index.js","mtime":1519638534000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.promise\";\nimport Vue from 'vue/dist/vue.js';\nimport app from './app.vue';\nimport BootstrapVue from 'bootstrap-vue';\nimport VueRouter from 'vue-router';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap-vue/dist/bootstrap-vue.css';\nimport Vuex from 'vuex';\nimport createPersistedState from 'vuex-persistedstate';\nimport router from './router';\nimport { getAll, createTimeline as _createTimeline, deleteTimeline as _deleteTimeline, changeTimelineTitle as _changeTimelineTitle, createEvent, linkEventToTimeline, unlinkEventFromEvent, linkEventToEvent, deleteEvent as _deleteEvent } from './scripts/api';\nVue.use(BootstrapVue);\nVue.use(VueRouter);\nVue.use(Vuex);\nVue.config.productionTip = false;\nvar timelines = [];\nvar store = new Vuex.Store({\n  state: {\n    timelines: timelines,\n    currentTimeline: null,\n    currentEvent: null\n  },\n  mutations: {\n    addTimeline: function addTimeline(state, timeline) {\n      state.timelines.push(timeline);\n    },\n    addEvent: function addEvent(state, event) {\n      state.currentTimeline.timelineEvents.push(event);\n    },\n    removeTimeline: function removeTimeline(state, id) {\n      for (var i = 0; i < state.timelines.length; i++) {\n        if (state.timelines[i].id === id) {\n          state.timelines.splice(i, 1);\n          if (state.currentTimeline != null) if (state.currentTimeline.id === id) state.currentTimeline = null;\n          return;\n        }\n      }\n    },\n    setCurrentTimeline: function setCurrentTimeline(state, timeline) {\n      state.currentTimeline = timeline;\n    },\n    clearCurrentTimeline: function clearCurrentTimeline(state) {\n      state.currentTimeline = null;\n    },\n    setCurrentEvent: function setCurrentEvent(state, event) {\n      state.currentEvent = event;\n    },\n    clearCurrentEvent: function clearCurrentEvent(state) {\n      state.currentEvent = null;\n    },\n    updateTimelineTitle: function updateTimelineTitle(state, payload) {\n      for (var i = 0; i < state.timelines.length; i++) {\n        if (state.timelines[i].id === payload.id) {\n          state.timelines[i].title = payload.title;\n\n          if (payload.id === state.currentTimeline.id) {\n            state.currentTimeline.title = payload.title;\n          }\n\n          return;\n        }\n      }\n    },\n    removeEvent: function removeEvent(state, id) {\n      for (var i = 0; i < state.currentTimeline.timelineEvents.length; i++) {\n        if (state.currentTimeline.timelineEvents[i].id === id) {\n          state.currentTimeline.timelineEvents.splice(i, 1);\n          if (state.currentEvent != null) if (state.currentEvent.id === id) state.currentEvent = null;\n          return;\n        }\n      }\n    }\n  },\n  actions: {\n    createTimeline: function createTimeline(_ref, title) {\n      var commit = _ref.commit;\n      return new Promise(function (resolve) {\n        _createTimeline(title).then(function (response) {\n          var item = response.data;\n          var timeline = {\n            title: item.Title,\n            date: item.CreationTimeStamp,\n            isDeleted: item.IsDeleted,\n            id: item.Id,\n            selected: false,\n            _rowVariant: ''\n          };\n          timeline.timelineEvents = [];\n          commit('addTimeline', timeline);\n          resolve(timeline);\n        });\n      });\n    },\n    deleteTimeline: function deleteTimeline(_ref2, id) {\n      var commit = _ref2.commit;\n\n      _deleteTimeline(id).then(function () {\n        commit('removeTimeline', id);\n      });\n    },\n    deleteSelectedTimelines: function deleteSelectedTimelines(_ref3) {\n      var state = _ref3.state;\n\n      /*\n        Filter returns an array of all selected timelines.\n        Foreach loops through that returned array,\n        using 'e' as the current timline.\n        Dispatch calls deleteTimeline action.\n        This at the end allows the use of this inside the forEach function.\n      */\n      state.timelines.filter(function (t) {\n        return t.selected;\n      }).forEach(function (e) {\n        this.dispatch('deleteTimeline', e.id);\n      }, this);\n    },\n    changeTimelineTitle: function changeTimelineTitle(_ref4, payload) {\n      var commit = _ref4.commit;\n      var id = payload.id;\n      var title = payload.title;\n\n      _changeTimelineTitle(id, title).then(function () {\n        commit('updateTimelineTitle', {\n          id: id,\n          title: title\n        });\n      });\n    },\n    createEventExact: function createEventExact(_ref5, payload) {\n      var state = _ref5.state,\n          commit = _ref5.commit;\n      var newEvent = {};\n      createEvent(payload).then(function (response) {\n        newEvent = response.data;\n        newEvent.LinkedTimelineEventIds = [];\n        linkEventToTimeline(newEvent.Id, state.currentTimeline.id).then(function () {\n          commit('addEvent', newEvent);\n        });\n      });\n    },\n    createEventBA: function createEventBA(_ref6, payload) {\n      var state = _ref6.state,\n          commit = _ref6.commit;\n      var newEvent = {};\n      createEvent(payload).then(function (response) {\n        newEvent = response.data;\n        linkEventToTimeline(newEvent.Id, state.currentTimeline.id).then(function () {\n          if (payload.beforeAfter === 'before') {\n            /*\n              Create a new timeline, create Event 1 at 12:00.\n              Create Event 2 set as before Event 1.\n              Now if you create Event 3 and also set this as before Event 1,\n              this will find that Event 2 already has a link to Event 1.\n              Replaces Event 2's link to Event 1 with a link to Event 3.\n              Links Event 3 to Event 1.\n              index would be the index of Event 2 in that example\n            */\n            var index = state.currentTimeline.timelineEvents.map(function (e) {\n              if (e.LinkedTimelineEventIds != null) if (e.LinkedTimelineEventIds[0] != null) return e.LinkedTimelineEventIds[0];\n            }).indexOf(payload.eventId);\n\n            if (index != -1) {\n              unlinkEventFromEvent(state.currentTimeline.timelineEvents[index].Id, payload.eventId);\n              linkEventToEvent(state.currentTimeline.timelineEvents[index].Id, newEvent.Id);\n              state.currentTimeline.timelineEvents[index].LinkedTimelineEventIds[0] = newEvent.Id;\n            }\n\n            linkEventToEvent(newEvent.Id, payload.eventId).then(function () {\n              newEvent.LinkedTimelineEventIds = [];\n              newEvent.LinkedTimelineEventIds.push(payload.eventId);\n              commit('addEvent', newEvent);\n            });\n          } else if (payload.beforeAfter === 'after') {\n            var _index = state.currentTimeline.timelineEvents.map(function (e) {\n              return e.Id;\n            }).indexOf(payload.eventId);\n\n            var item = state.currentTimeline.timelineEvents[_index];\n\n            if (item.LinkedTimelineEventIds != null) {\n              if (item.LinkedTimelineEventIds[0] != null) {\n                linkEventToEvent(newEvent.Id, item.LinkedTimelineEventIds[0]);\n                unlinkEventFromEvent(item.Id, item.LinkedTimelineEventIds[0]);\n                newEvent.LinkedTimelineEventIds = [];\n                newEvent.LinkedTimelineEventIds.push(item.LinkedTimelineEventIds[0]);\n              }\n            }\n\n            linkEventToEvent(item.Id, newEvent.Id).then(function () {\n              item.LinkedTimelineEventIds = [];\n              item.LinkedTimelineEventIds.push(newEvent.Id);\n              commit('addEvent', newEvent);\n            });\n          }\n        });\n      });\n    },\n    deleteEvent: function deleteEvent(_ref7, id) {\n      var commit = _ref7.commit;\n\n      /*\n        if event is in another events linked list and event has an event in its linked list\n          put event after into event before's linked list\n        else if event is in another events linked list\n          remove event from linked list\n        else if event has an event in linked list\n          remove event from linked list\n        delete event\n        unlink from timeline\n      */\n      // let eventBeforeIndex = state.currentTimeline.timelineEvents.map(function(e) {if(e.LinkedTimelineEventIds != null)if(e.LinkedTimelineEventIds[0] != null)return e.LinkedTimelineEventIds[0]}).indexOf(id)\n      // let event = state.currentTimeline.timelineEvents.map(function (e) {return e.}\n      // if (eventBeforeIndex != -1 && ) {\n      // }\n      _deleteEvent(id).then(function () {\n        commit('removeEvent', id);\n      });\n    }\n  },\n  getters: {\n    selectedTimelines: function selectedTimelines(state) {\n      return state.timelines.filter(function (t) {\n        return t.selected;\n      });\n    }\n  },\n  plugins: [createPersistedState({\n    paths: ['currentTimeline', 'currentEvent']\n  })]\n});\nnew Vue({\n  render: function render(h) {\n    return h(app);\n  },\n  router: router,\n  store: store,\n  methods: {\n    fetchTimelines: function fetchTimelines() {\n      var _this = this;\n\n      timelines.splice(0, timelines.length);\n      var get = getAll();\n      get.then(function (data) {\n        for (var i = 0; i < data.data.Timelines.length; i++) {\n          var item = data.data.Timelines[i];\n          var timeline = {\n            title: item.Title,\n            date: item.CreationTimeStamp,\n            isDeleted: item.isDeleted,\n            id: item.Id,\n            timelineEvents: item.TimelineEvents,\n            selected: false,\n            _rowVariant: ''\n          };\n          timelines.push(timeline);\n        }\n\n        _this.updateCurrentTimeline();\n\n        _this.updateCurrentEvent();\n      });\n    },\n    updateCurrentTimeline: function updateCurrentTimeline() {\n      if (this.$store.state.currentTimeline === null) return;\n      if (this.$store.state.timelines === null) return;\n      if (this.$store.state.timelines[0] === null) return;\n      var index = this.$store.state.timelines.map(function (e) {\n        return e.id;\n      }).indexOf(this.$store.state.currentTimeline.id);\n\n      if (index === -1) {\n        this.$store.commit('clearCurrentTimeline');\n      } else {\n        this.$store.commit('setCurrentTimeline', this.$store.state.timelines[index]);\n      }\n    },\n    updateCurrentEvent: function updateCurrentEvent() {\n      if (this.$store.state.currentEvent === null) return;\n      if (this.$store.state.currentTimeline === null) return;\n      if (this.$store.state.currentTimeline.timelineEvents === null) return;\n      if (this.$store.state.currentTimeline.timelineEvents[0] === null) return;\n      var index = this.$store.state.currentTimeline.timelineEvents.map(function (e) {\n        return e.Id;\n      }).indexOf(this.$store.state.currentEvent.Id);\n\n      if (index === -1) {\n        this.$store.commit('clearCurrentEvent');\n      } else {\n        this.$store.commit('setCurrentEvent', this.$store.state.currentTimeline.timelineEvents[index]);\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.fetchTimelines();\n  }\n}).$mount('#app');",{"version":3,"sources":["src\\main.js"],"names":["Vue","app","BootstrapVue","VueRouter","Vuex","createPersistedState","router","getAll","createTimeline","deleteTimeline","changeTimelineTitle","createEvent","linkEventToTimeline","unlinkEventFromEvent","linkEventToEvent","deleteEvent","use","config","productionTip","timelines","store","Store","state","currentTimeline","currentEvent","mutations","addTimeline","timeline","push","addEvent","event","timelineEvents","removeTimeline","id","i","length","splice","setCurrentTimeline","clearCurrentTimeline","setCurrentEvent","clearCurrentEvent","updateTimelineTitle","payload","title","removeEvent","actions","commit","Promise","resolve","then","item","response","data","Title","date","CreationTimeStamp","isDeleted","IsDeleted","Id","selected","_rowVariant","deleteSelectedTimelines","filter","t","forEach","e","dispatch","createEventExact","newEvent","LinkedTimelineEventIds","createEventBA","beforeAfter","index","map","indexOf","eventId","getters","selectedTimelines","plugins","paths","render","h","methods","fetchTimelines","get","Timelines","TimelineEvents","updateCurrentTimeline","updateCurrentEvent","$store","mounted","$mount"],"mappings":"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","file":"C:\\Users\\chris\\Desktop\\aileron\\src\\main.js","sourceRoot":"C:\\Users\\chris\\Desktop\\aileron","sourcesContent":["import Vue from 'vue/dist/vue.js'\nimport app from './app.vue'\nimport BootstrapVue from 'bootstrap-vue'\nimport VueRouter from 'vue-router'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'bootstrap-vue/dist/bootstrap-vue.css'\nimport Vuex from 'vuex'\nimport createPersistedState from 'vuex-persistedstate'\nimport router from './router'\nimport {getAll, createTimeline, deleteTimeline, changeTimelineTitle, createEvent, linkEventToTimeline, unlinkEventFromEvent, linkEventToEvent, deleteEvent} from './scripts/api'\n\nVue.use(BootstrapVue)\nVue.use(VueRouter)\nVue.use(Vuex)\n\nVue.config.productionTip = false\n\nvar timelines = []\n\nconst store = new Vuex.Store({\n  state: {\n    timelines,\n    currentTimeline: null,\n    currentEvent: null\n  },\n  mutations: {\n    addTimeline (state, timeline) {\n      state.timelines.push(timeline)\n    },\n    addEvent(state, event) {\n      state.currentTimeline.timelineEvents.push(event)\n    },\n    removeTimeline(state, id) {\n      for (var i = 0; i < state.timelines.length; i++) {\n        if (state.timelines[i].id === id) {\n          state.timelines.splice(i,1)\n          if (state.currentTimeline != null)\n            if (state.currentTimeline.id === id)\n              state.currentTimeline = null\n          return\n        }\n      }\n    },\n    setCurrentTimeline(state, timeline) {\n      state.currentTimeline = timeline\n    },\n    clearCurrentTimeline(state) {\n      state.currentTimeline = null\n    },\n    setCurrentEvent(state, event) {\n      state.currentEvent = event\n    },\n    clearCurrentEvent(state) {\n      state.currentEvent = null\n    },\n    updateTimelineTitle(state, payload) {\n      for (var i = 0; i < state.timelines.length; i++) {\n        if (state.timelines[i].id === payload.id) {\n          state.timelines[i].title = payload.title\n          if(payload.id === state.currentTimeline.id) {\n            state.currentTimeline.title = payload.title\n          }\n          return\n        }\n      }\n    },\n    removeEvent(state, id) {\n      for (var i = 0; i < state.currentTimeline.timelineEvents.length; i++) {\n        if (state.currentTimeline.timelineEvents[i].id === id) {\n          state.currentTimeline.timelineEvents.splice(i,1)\n          if (state.currentEvent != null)\n            if (state.currentEvent.id === id)\n              state.currentEvent = null\n          return\n        }\n      }\n    }\n  },\n  actions: {\n    createTimeline ({ commit }, title) {\n      return new Promise ((resolve) => {\n        createTimeline(title).then(response => {\n          var item = response.data\n          var timeline = {\n           title: item.Title,\n           date: item.CreationTimeStamp,\n           isDeleted: item.IsDeleted,\n           id: item.Id,\n           selected: false,\n           _rowVariant: ''\n        }\n          timeline.timelineEvents = []\n          commit('addTimeline', timeline)\n          resolve(timeline)\n        })\n      })\n    },\n    deleteTimeline({ commit }, id) {\n      deleteTimeline(id).then(() => {\n        commit('removeTimeline', id)\n      })\n    },\n    deleteSelectedTimelines({ state }) {\n      /*\n        Filter returns an array of all selected timelines.\n        Foreach loops through that returned array,\n        using 'e' as the current timline.\n        Dispatch calls deleteTimeline action.\n        This at the end allows the use of this inside the forEach function.\n      */\n      state.timelines.filter(t => t.selected).forEach(function(e){this.dispatch('deleteTimeline',e.id)}, this)\n    },\n    changeTimelineTitle({ commit }, payload) {\n      var id = payload.id\n      var title = payload.title\n      changeTimelineTitle(id, title).then(() => {\n        commit('updateTimelineTitle', {id, title})\n      })\n    },\n    createEventExact ({state, commit}, payload) {\n      var newEvent = {}\n      createEvent(payload).then(response => {\n        newEvent = response.data\n        newEvent.LinkedTimelineEventIds = []\n        linkEventToTimeline(newEvent.Id, state.currentTimeline.id).then(() => {\n          commit('addEvent', newEvent)\n        })\n      })\n    },\n    createEventBA({state, commit}, payload) {\n      var newEvent = {}\n      createEvent(payload).then(response => {\n        newEvent = response.data\n        linkEventToTimeline(newEvent.Id, state.currentTimeline.id).then(() => {\n          if (payload.beforeAfter === 'before') {\n            /*\n              Create a new timeline, create Event 1 at 12:00.\n              Create Event 2 set as before Event 1.\n              Now if you create Event 3 and also set this as before Event 1,\n              this will find that Event 2 already has a link to Event 1.\n              Replaces Event 2's link to Event 1 with a link to Event 3.\n              Links Event 3 to Event 1.\n              index would be the index of Event 2 in that example\n            */\n            let index = state.currentTimeline.timelineEvents.map(function(e) {if(e.LinkedTimelineEventIds != null)if(e.LinkedTimelineEventIds[0] != null)return e.LinkedTimelineEventIds[0]}).indexOf(payload.eventId)\n            if (index != -1) {\n              unlinkEventFromEvent(state.currentTimeline.timelineEvents[index].Id, payload.eventId)\n              linkEventToEvent(state.currentTimeline.timelineEvents[index].Id, newEvent.Id)\n              state.currentTimeline.timelineEvents[index].LinkedTimelineEventIds[0] = newEvent.Id\n            }\n            linkEventToEvent(newEvent.Id, payload.eventId).then(() => {\n              newEvent.LinkedTimelineEventIds = []\n              newEvent.LinkedTimelineEventIds.push(payload.eventId)\n              commit('addEvent', newEvent)\n            })\n          } else if (payload.beforeAfter === 'after') {\n            let index = state.currentTimeline.timelineEvents.map(function(e) {return e.Id}).indexOf(payload.eventId)\n            let item = state.currentTimeline.timelineEvents[index]\n            if (item.LinkedTimelineEventIds != null) {\n              if (item.LinkedTimelineEventIds[0] != null) {\n                linkEventToEvent(newEvent.Id, item.LinkedTimelineEventIds[0])\n                unlinkEventFromEvent(item.Id, item.LinkedTimelineEventIds[0])\n                newEvent.LinkedTimelineEventIds = []\n                newEvent.LinkedTimelineEventIds.push(item.LinkedTimelineEventIds[0])\n              }\n            }\n            linkEventToEvent(item.Id, newEvent.Id).then(() => {\n              item.LinkedTimelineEventIds = []\n              item.LinkedTimelineEventIds.push(newEvent.Id)\n              commit('addEvent', newEvent)\n            })\n          }\n        })\n      })\n    },\n    deleteEvent({commit}, id) {\n      /*\n        if event is in another events linked list and event has an event in its linked list\n          put event after into event before's linked list\n        else if event is in another events linked list\n          remove event from linked list\n        else if event has an event in linked list\n          remove event from linked list\n        delete event\n        unlink from timeline\n      */\n      // let eventBeforeIndex = state.currentTimeline.timelineEvents.map(function(e) {if(e.LinkedTimelineEventIds != null)if(e.LinkedTimelineEventIds[0] != null)return e.LinkedTimelineEventIds[0]}).indexOf(id)\n      // let event = state.currentTimeline.timelineEvents.map(function (e) {return e.}\n      // if (eventBeforeIndex != -1 && ) {\n\n      // }\n      deleteEvent(id).then(() => {\n        commit('removeEvent', id)\n      })\n    }\n  },\n  getters: {\n    selectedTimelines: (state) => {\n      return state.timelines.filter(t => t.selected)\n    }\n  },\n  plugins: [createPersistedState({\n    paths: ['currentTimeline','currentEvent']\n })]\n})\n\nnew Vue({\n  render: h => h(app),\n  router,\n  store,\n  methods: {\n    fetchTimelines() {\n      timelines.splice(0, timelines.length)\n      var get = getAll()\n      get.then((data) => {\n        for (var i = 0; i < data.data.Timelines.length; i++) {\n          var item = data.data.Timelines[i]\n          var timeline = {\n             title: item.Title,\n             date: item.CreationTimeStamp,\n             isDeleted: item.isDeleted,\n             id: item.Id,\n             timelineEvents: item.TimelineEvents,\n             selected: false,\n             _rowVariant: ''\n          }\n          timelines.push(timeline)\n        }\n        this.updateCurrentTimeline()\n        this.updateCurrentEvent()\n      })\n    },\n    updateCurrentTimeline() {\n      if (this.$store.state.currentTimeline === null) return\n      if (this.$store.state.timelines === null) return\n      if (this.$store.state.timelines[0] === null) return\n      var index = this.$store.state.timelines.map(function(e){return e.id}).indexOf(this.$store.state.currentTimeline.id)\n      if (index === -1) {\n        this.$store.commit('clearCurrentTimeline')\n      } else {\n        this.$store.commit('setCurrentTimeline',this.$store.state.timelines[index])\n      }\n    },\n    updateCurrentEvent() {\n      if (this.$store.state.currentEvent === null) return\n      if (this.$store.state.currentTimeline === null) return\n      if (this.$store.state.currentTimeline.timelineEvents === null) return\n      if (this.$store.state.currentTimeline.timelineEvents[0] === null) return\n      var index = this.$store.state.currentTimeline.timelineEvents.map(function(e){return e.Id}).indexOf(this.$store.state.currentEvent.Id)\n      if (index === -1) {\n        this.$store.commit('clearCurrentEvent')\n      } else {\n        this.$store.commit('setCurrentEvent',this.$store.state.currentTimeline.timelineEvents[index])\n      }\n    }\n  },\n  mounted() {\n    this.fetchTimelines()\n  }\n}).$mount('#app')\n"]}]}