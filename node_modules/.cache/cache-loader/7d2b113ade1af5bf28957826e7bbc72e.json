{"remainingRequest":"C:\\Users\\chris\\Desktop\\aileron\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\chris\\Desktop\\aileron\\node_modules\\vue-loader\\lib\\selector.js?type=script&index=0!C:\\Users\\chris\\Desktop\\aileron\\src\\components\\register\\register.vue","dependencies":[{"path":"C:\\Users\\chris\\Desktop\\aileron\\src\\components\\register\\register.vue","mtime":1520963921746},{"path":"C:\\Users\\chris\\Desktop\\aileron\\package.json","mtime":1520865749549},{"path":"C:\\Users\\chris\\Desktop\\aileron\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1520545180302},{"path":"C:\\Users\\chris\\Desktop\\aileron\\node_modules\\babel-loader\\lib\\index.js","mtime":1519636541000},{"path":"C:\\Users\\chris\\Desktop\\aileron\\node_modules\\vue-loader\\lib\\selector.js","mtime":1520395331000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport aSelectionHandler from '../selection-handler/selection-handler.vue';\nimport axios from 'axios';\n/*\r\n  The columns of the table.\r\n*/\n\nvar fields = [{\n  key: 'title',\n  sortable: true\n}, {\n  key: 'date',\n  sortable: true,\n  formatter: 'dateFormatter'\n}];\n/*\r\n  Default sort.\r\n*/\n\nvar sort = {\n  by: 'date',\n  desc: false\n};\n\nfunction setSort(by, desc) {\n  sort.by = by;\n  sort.desc = desc;\n}\n\nfunction clearSort() {\n  sort.by = '';\n  sort.desc = '';\n}\n/*\r\n  Keep track of what is sorted and how many.\r\n*/\n\n\nvar selectCount = 0;\nvar selectedItems = [];\n/*\r\n  Called when clearing all selected rows.\r\n  Parameter this(t) to access the selectCount.\r\n*/\n\nfunction clearSelected(t) {\n  for (var i = 0; i < selectedItems.length; i++) {\n    var timeline = selectedItems[i];\n    timeline.selected = false;\n    timeline._rowVariant = '';\n  }\n\n  selectedItems = [];\n  t.selectCount = 0;\n}\n/*\r\n  Called when selecting a row.\r\n  Parameter this(t) to access the selectCount.\r\n  Parameter item that is being selected.\r\n*/\n\n\nfunction selectRow(item, t) {\n  item.selected = true, item._rowVariant = 'select';\n  t.selectCount++;\n  selectedItems.push(item);\n}\n/*\r\n  Called when deselecting a row.\r\n  Parameter this(t) to access selectCount.\r\n  Parameter item that is being deselected.\r\n*/\n\n\nfunction deselectRow(item, t) {\n  item.selected = false, item._rowVariant = '';\n  t.selectCount--;\n\n  for (var i = 0; i < selectedItems.length; i++) {\n    if (selectedItems[i] === item) {\n      selectedItems.splice(i, 1);\n      break;\n    }\n  }\n}\n/*\r\n  Called when selecting between two rows by shift clicking.\r\n  Parameter this(t) to access selectCount.\r\n  Parameter item that is being selected.\r\n*/\n\n\nfunction selectBetweenRows(item, t) {\n  console.log(item, t);\n}\n\nexport default {\n  name: 'aRegister',\n  components: {\n    aSelectionHandler: aSelectionHandler\n  },\n  data: function data() {\n    return {\n      fields: fields,\n      sort: sort,\n      selectCount: selectCount,\n      clearSelected: clearSelected\n    };\n  },\n  methods: {\n    /*\r\n      Called when the cancel button is clicked on the selection-handler.\r\n    */\n    cancel: function cancel() {\n      clearSelected(this);\n    },\n\n    /*\r\n      Called when the delete button is clicked on the selection-handler.\r\n    */\n    del: function del() {},\n\n    /*\r\n      By default the b-table sort just loops between ascending and descending.\r\n      By checking when sorted this can turn sorting off on a column every third click.\r\n    */\n    sortChanged: function sortChanged(ctx) {\n      if (ctx.sortBy === sort.by && ctx.sortDesc === false && sort.desc === true) {\n        clearSort();\n      } else {\n        setSort(ctx.sortBy, ctx.sortDesc);\n      }\n\n      console.log(sort);\n    },\n\n    /*\r\n      Deals with selection and deselction of rows.\r\n      There must have been an easier way to do this.\r\n    */\n    rowClicked: function rowClicked(item, index, event) {\n      if (item.selected) {\n        if (event.ctrlKey) {\n          deselectRow(item, this);\n        } else if (!event.shiftKey) {\n          if (this.selectCount > 1) {\n            clearSelected(this);\n            selectRow(item, this);\n          } else {\n            deselectRow(item, this);\n          }\n        }\n      } else {\n        if (event.ctrlKey) {\n          selectRow(item, this);\n        } else if (event.shiftKey) {\n          selectRow(item, this);\n\n          if (this.selectCount > 1) {\n            selectBetweenRows(item, this);\n          }\n        } else {\n          if (this.selectCount > 0) {\n            clearSelected(this);\n          }\n\n          selectRow(item, this);\n        }\n      }\n    },\n\n    /*\r\n      When a row is doulbe clicked, open that timeline.\r\n    */\n    openTimeline: function openTimeline(item) {\n      this.$router.push({\n        name: 'TIMELINE',\n        params: {\n          timeline: item\n        }\n      });\n    },\n\n    /*\r\n      Calls AWS API which invokes a lambda function.\r\n      The lambda calls the ideagen API and modifies some of the data before returning it.\r\n    */\n    getTimelines: function getTimelines(ctx) {\n      var promise = axios.get('https://b0qss3eydk.execute-api.eu-west-2.amazonaws.com/prod/timelines', {\n        headers: {\n          'X-Api-Key': 'zQfYRHZ1vY3GFnvDZep8Z5KqlHsOKxgf1vnldchF'\n        }\n      });\n      return promise.then(function (data) {\n        return data.data;\n      }).catch(function (error) {\n        return [];\n      });\n    },\n\n    /*\r\n      Used to format the ticks returned by the API to readable string.\r\n      Could be done in the lambda before returning the data, however keeping the ticks\r\n      means that the date can be sorted correctly.\r\n    */\n    dateFormatter: function dateFormatter(ticks) {\n      var epochTicks = 621355968000000000;\n      var ticksSinceEpoch = ticks - epochTicks;\n      var millisecondsSinceEpoch = ticksSinceEpoch / 10000;\n      var date = new Date(millisecondsSinceEpoch);\n      return date.toLocaleDateString();\n    },\n\n    /*\r\n      Create a new timeline.\r\n    */\n    create: function create() {}\n  }\n};",{"version":3,"sources":["register.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AAEA,AACA,AACA;;;;AACA;;YAEA;CADA;;;aAEA;;AAEA,AACA,AACA;;;;AACA;MAEA;QACA;AAFA;;AAIA,2BACA;YACA;cACA;;;AACA,qBACA;YACA;cACA;;AAEA,AACA,AACA;;;;;AACA;AACA;AAEA,AACA,AACA,AACA;;;;;AACA,0BACA;iDACA;iCACA;wBACA;2BACA;AACA;;kBACA;kBACA;;AAEA,AACA,AACA,AACA,AACA;;;;;;;AACA,4BACA;kBACA,yBACA;IACA;qBACA;;AAEA,AACA,AACA,AACA,AACA;;;;;;;AACA,8BACA;kBACA,0BACA;IACA;;iDACA;mCACA;8BACA;AACA;AACA;AACA;;AAEA,AACA,AACA,AACA,AACA;;;;;;;AACA,oCACA;oBACA;;;AAEA;QAEA;;AAEA,AACA;AAFA;wBAGA;;AAEA;AACA;AACA;AACA,AACA;AALA;AAMA;;AAEA,AACA,AACA;;;8BACA;oBACA;AACA;;AACA,AACA,AACA;;;wBACA,CACA;;AACA,AACA,AACA,AACA;;;;2CACA;kFACA;AACA;aACA;gCACA;AACA;;kBACA;AACA;;AACA,AACA,AACA,AACA;;;;wDACA;yBACA;2BACA;4BACA;oCACA;oCACA;0BACA;4BACA;iBACA;8BACA;AACA;AACA;aACA;2BACA;0BACA;mCACA;0BACA;;oCACA;oCACA;AACA;eACA;oCACA;0BACA;AACA;;0BACA;AACA;AACA;AACA;;AACA,AACA,AACA;;;8CACA;;;;oBACA;;;AACA;;AACA,AACA,AACA,AACA;;;;6CACA;;;uBAGA,AACA,AACA;AAHA;AADA;0CAKA;oBACA;gCACA;eACA;AACA;AACA;;AACA,AACA,AACA,AACA,AACA;;;;;iDACA;uBACA;oCACA;qDACA;0BACA;kBACA;AACA;;AACA,AACA,AACA;;;8BAEA,CACA,AACA;AAhGA;AAbA","sourceRoot":"src\\components\\register","sourcesContent":["<template lang=\"html\">\r\n  <div>\r\n    <b-row class=\"register\" align-v=\"center\">\r\n      <!-- used to center the table -->\r\n      <b-col></b-col>\r\n      <b-col md=\"11\">\r\n        <b-btn id=\"create\" @click=\"create\">+</b-btn>\r\n        <b-table :items=\"getTimelines\"\r\n                  bordered:false\r\n                  :sort-by.sync=\"sort.by\"\r\n                  :sort-desc.sync=\"sort.desc\"\r\n                  :fields=\"fields\"\r\n                  @row-clicked=\"rowClicked\"\r\n                  @sort-changed=\"sortChanged\"\r\n                  @row-dblclicked=\"openTimeline\"\r\n                  >\r\n        </b-table>\r\n      </b-col>\r\n      <!-- used to center the table -->\r\n      <b-col></b-col>\r\n    </b-row>\r\n    <a-selection-handler :select-count=\"selectCount\" @del=\"del\" @cancel=\"cancel\"></a-selection-handler>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport aSelectionHandler from '../selection-handler/selection-handler.vue'\r\nimport axios from 'axios'\r\n\r\n/*\r\n  The columns of the table.\r\n*/\r\nconst fields = [\r\n  { key: 'title', sortable: true},\r\n  { key: 'date', sortable: true, formatter: 'dateFormatter' }\r\n]\r\n\r\n/*\r\n  Default sort.\r\n*/\r\nvar sort = {\r\n  by: 'date',\r\n  desc: false\r\n}\r\n\r\nfunction setSort(by, desc) {\r\n  sort.by = by\r\n  sort.desc = desc\r\n}\r\nfunction clearSort() {\r\n  sort.by = ''\r\n  sort.desc = ''\r\n}\r\n\r\n/*\r\n  Keep track of what is sorted and how many.\r\n*/\r\nvar selectCount = 0\r\nvar selectedItems = []\r\n\r\n/*\r\n  Called when clearing all selected rows.\r\n  Parameter this(t) to access the selectCount.\r\n*/\r\nfunction clearSelected(t) {\r\n  for (var i = 0; i < selectedItems.length; i++) {\r\n    var timeline = selectedItems[i]\r\n    timeline.selected = false\r\n    timeline._rowVariant = ''\r\n  }\r\n  selectedItems = []\r\n  t.selectCount = 0\r\n}\r\n\r\n/*\r\n  Called when selecting a row.\r\n  Parameter this(t) to access the selectCount.\r\n  Parameter item that is being selected.\r\n*/\r\nfunction selectRow(item, t) {\r\n  item.selected = true,\r\n  item._rowVariant = 'select'\r\n  t.selectCount++\r\n  selectedItems.push(item)\r\n}\r\n\r\n/*\r\n  Called when deselecting a row.\r\n  Parameter this(t) to access selectCount.\r\n  Parameter item that is being deselected.\r\n*/\r\nfunction deselectRow(item, t) {\r\n  item.selected = false,\r\n  item._rowVariant = ''\r\n  t.selectCount--\r\n  for (var i = 0; i < selectedItems.length; i++) {\r\n    if (selectedItems[i] === item) {\r\n      selectedItems.splice(i,1)\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n  Called when selecting between two rows by shift clicking.\r\n  Parameter this(t) to access selectCount.\r\n  Parameter item that is being selected.\r\n*/\r\nfunction selectBetweenRows(item, t) {\r\n  console.log(item, t)\r\n}\r\n\r\nexport default {\r\n  name: 'aRegister',\r\n  components: {\r\n    aSelectionHandler\r\n  },\r\n  data() {\r\n    return {\r\n      fields,\r\n      sort,\r\n      selectCount,\r\n      clearSelected\r\n    }\r\n  },\r\n  methods: {\r\n    /*\r\n      Called when the cancel button is clicked on the selection-handler.\r\n    */\r\n    cancel: function() {\r\n      clearSelected(this)\r\n    },\r\n    /*\r\n      Called when the delete button is clicked on the selection-handler.\r\n    */\r\n    del: function() {\r\n    },\r\n    /*\r\n      By default the b-table sort just loops between ascending and descending.\r\n      By checking when sorted this can turn sorting off on a column every third click.\r\n    */\r\n    sortChanged: function(ctx) {\r\n      if (ctx.sortBy === sort.by && ctx.sortDesc === false && sort.desc === true) {\r\n        clearSort()\r\n      } else {\r\n        setSort(ctx.sortBy, ctx.sortDesc)\r\n      }\r\n      console.log(sort)\r\n    },\r\n    /*\r\n      Deals with selection and deselction of rows.\r\n      There must have been an easier way to do this.\r\n    */\r\n    rowClicked: function(item, index, event) {\r\n      if (item.selected) {\r\n        if (event.ctrlKey) {\r\n          deselectRow(item, this)\r\n        } else if (!event.shiftKey) {\r\n          if (this.selectCount > 1) {\r\n            clearSelected(this)\r\n            selectRow(item, this)\r\n          } else {\r\n            deselectRow(item, this)\r\n          }\r\n        }\r\n      } else {\r\n        if (event.ctrlKey) {\r\n          selectRow(item, this)\r\n        } else if (event.shiftKey) {\r\n          selectRow(item, this)\r\n          if (this.selectCount > 1) {\r\n            selectBetweenRows(item, this)\r\n          }\r\n        } else {\r\n          if (this.selectCount > 0) {\r\n            clearSelected(this)\r\n          }\r\n          selectRow(item, this)\r\n        }\r\n      }\r\n    },\r\n    /*\r\n      When a row is doulbe clicked, open that timeline.\r\n    */\r\n    openTimeline: function(item) {\r\n      this.$router.push({name: 'TIMELINE', params: {timeline: item}} )\r\n    },\r\n    /*\r\n      Calls AWS API which invokes a lambda function.\r\n      The lambda calls the ideagen API and modifies some of the data before returning it.\r\n    */\r\n    getTimelines: function(ctx) {\r\n      let promise = axios.get('https://b0qss3eydk.execute-api.eu-west-2.amazonaws.com/prod/timelines', {\r\n        headers: {\r\n          'X-Api-Key': 'zQfYRHZ1vY3GFnvDZep8Z5KqlHsOKxgf1vnldchF'\r\n        }\r\n      })\r\n      return promise.then((data) => {\r\n        return data.data\r\n      }).catch(error => {\r\n        return []\r\n      })\r\n    },\r\n    /*\r\n      Used to format the ticks returned by the API to readable string.\r\n      Could be done in the lambda before returning the data, however keeping the ticks\r\n      means that the date can be sorted correctly.\r\n    */\r\n    dateFormatter: function(ticks) {\r\n      const epochTicks = 621355968000000000;\r\n      const ticksSinceEpoch = ticks - epochTicks;\r\n      const millisecondsSinceEpoch = ticksSinceEpoch / 10000;\r\n      const date = new Date(millisecondsSinceEpoch);\r\n      return date.toLocaleDateString()\r\n    },\r\n    /*\r\n      Create a new timeline.\r\n    */\r\n    create: function() {\r\n\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import '../../assets/styles/theme.scss';\r\n\r\n.register {\r\n  /*\r\n    Stops timelines from highlighting when shift clicking.\r\n  */\r\n  user-select: none; /* CSS3 (little to no support) */\r\n  -ms-user-select: none; /* IE 10+ */\r\n  -moz-user-select: none; /* Gecko (Firefox) */\r\n  -webkit-user-select: none; /* Webkit (Safari, Chrome) */\r\n\r\n  padding-top: 20px;\r\n  table {\r\n    background-color: $register-bg;\r\n    color: $text;\r\n    th {\r\n      background-color: $background;\r\n      border: none;\r\n      @media only screen and (max-width: 576px) {\r\n        font-size: 2em;\r\n      }\r\n      font-size: 3em;\r\n      outline: none;\r\n    }\r\n    td {\r\n      border: none;\r\n      font-size: 1.5em;\r\n    }\r\n    .table-select {\r\n      background-color: $select;\r\n      color: white;\r\n    }\r\n  }\r\n  #create {\r\n    background-color: $create;\r\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.26);\r\n    border: none;\r\n    border-radius: 25px;\r\n    width: 45px;\r\n    height: 45px;\r\n    font-size: 20px;\r\n    float: right;\r\n  }\r\n}\r\n</style>\r\n"]}]}