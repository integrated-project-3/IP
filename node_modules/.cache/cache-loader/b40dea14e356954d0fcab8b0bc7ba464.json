{"remainingRequest":"C:\\Users\\chris\\Desktop\\aileron\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\chris\\Desktop\\aileron\\node_modules\\eslint-loader\\index.js??ref--18-0!C:\\Users\\chris\\Desktop\\aileron\\src\\scripts\\aws.js","dependencies":[{"path":"C:\\Users\\chris\\Desktop\\aileron\\src\\scripts\\aws.js","mtime":1520874258916},{"path":"C:\\Users\\chris\\Desktop\\aileron\\package.json","mtime":1520865749549},{"path":"C:\\Users\\chris\\Desktop\\aileron\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1520545180302},{"path":"C:\\Users\\chris\\Desktop\\aileron\\node_modules\\babel-loader\\lib\\index.js","mtime":1519636541000},{"path":"C:\\Users\\chris\\Desktop\\aileron\\node_modules\\eslint-loader\\index.js","mtime":1519638534000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.promise\";\n\nvar aws = require('aws-sdk/dist/aws-sdk-react-native');\n\nvar region = 'eu-west-2';\nvar identityPoolId = 'eu-west-2:08d581de-ebd5-4b08-9a05-a19aadcca3bc';\naws.config.update({\n  region: region\n});\naws.config.credentials = new aws.CognitoIdentityCredentials({\n  IdentityPoolId: identityPoolId\n});\nvar lambda = new aws.Lambda({\n  region: region,\n  apiVersion: '2015-03-31'\n});\nvar resp;\n\nfunction fetch(path, method) {\n  var pullParams = {\n    FunctionName: 'Aileron',\n    InvocationType: 'RequestResponse',\n    LogType: 'None',\n    method: method,\n    path: path,\n    authToken: 'db79d35b-762a-4ec8-b74e-50517a18c724'\n  };\n  var response = new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      lambda.invoke(pullParams, function (error, data) {\n        if (error) {\n          console.log(error);\n          reject(null);\n        } else {\n          resolve(JSON.parse(data.Payload));\n        }\n      });\n    }, 2000);\n  });\n  response.then( // Log the fulfillment value\n  function (val) {\n    resp = val;\n  }).catch( // Log the rejection reason\n  function (reason) {\n    return reason;\n  });\n}\n\nfunction getTimelines() {\n  fetch(\"/Timeline/GetTimelines\", \"GET\");\n  return resp;\n}\n\nexport { getTimelines };",{"version":3,"sources":["src\\scripts\\aws.js"],"names":["aws","require","region","identityPoolId","config","update","credentials","CognitoIdentityCredentials","IdentityPoolId","lambda","Lambda","apiVersion","resp","fetch","path","method","pullParams","FunctionName","InvocationType","LogType","authToken","response","Promise","resolve","reject","setTimeout","invoke","error","data","console","log","JSON","parse","Payload","then","val","catch","reason","getTimelines"],"mappings":";;AAAA,IAAIA,MAAMC,QAAQ,mCAAR,CAAV;;AAEA,IAAMC,SAAS,WAAf;AACA,IAAMC,iBAAiB,gDAAvB;AAEAH,IAAII,MAAJ,CAAWC,MAAX,CAAkB;AAACH,UAAQA;AAAT,CAAlB;AACAF,IAAII,MAAJ,CAAWE,WAAX,GAAyB,IAAIN,IAAIO,0BAAR,CAAmC;AAACC,kBAAgBL;AAAjB,CAAnC,CAAzB;AAEA,IAAIM,SAAS,IAAIT,IAAIU,MAAR,CAAe;AAACR,UAAQA,MAAT;AAAiBS,cAAY;AAA7B,CAAf,CAAb;AAEA,IAAIC,IAAJ;;AAEA,SAASC,KAAT,CAAeC,IAAf,EAAqBC,MAArB,EAA6B;AAC3B,MAAIC,aAAa;AACfC,kBAAc,SADC;AAEfC,oBAAgB,iBAFD;AAGfC,aAAS,MAHM;AAIfJ,YAAQA,MAJO;AAKfD,UAAMA,IALS;AAMfM,eAAW;AANI,GAAjB;AASA,MAAIC,WAAW,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC9CC,eAAW,YAAM;AACfhB,aAAOiB,MAAP,CAAcV,UAAd,EAA0B,UAASW,KAAT,EAAgBC,IAAhB,EAAsB;AAC9C,YAAID,KAAJ,EAAW;AACTE,kBAAQC,GAAR,CAAYH,KAAZ;AACAH,iBAAO,IAAP;AACD,SAHD,MAGO;AACLD,kBAAQQ,KAAKC,KAAL,CAAWJ,KAAKK,OAAhB,CAAR;AACD;AACF,OAPD;AAQD,KATD,EASG,IATH;AAUD,GAXc,CAAf;AAaAZ,WAASa,IAAT,EACE;AACA,YAASC,GAAT,EAAc;AACZvB,WAAOuB,GAAP;AACD,GAJH,EAKGC,KALH,EAMI;AACA,YAACC,MAAD,EAAY;AACV,WAAOA,MAAP;AACD,GATL;AAUD;;AAED,SAASC,YAAT,GAAwB;AACtBzB,QAAM,wBAAN,EAAgC,KAAhC;AACA,SAAOD,IAAP;AACD;;AAED,SAAQ0B,YAAR","file":"C:\\Users\\chris\\Desktop\\aileron\\src\\scripts\\aws.js","sourceRoot":"C:\\Users\\chris\\Desktop\\aileron","sourcesContent":["var aws = require('aws-sdk/dist/aws-sdk-react-native');\r\n\r\nconst region = 'eu-west-2'\r\nconst identityPoolId = 'eu-west-2:08d581de-ebd5-4b08-9a05-a19aadcca3bc'\r\n\r\naws.config.update({region: region})\r\naws.config.credentials = new aws.CognitoIdentityCredentials({IdentityPoolId: identityPoolId});\r\n\r\nvar lambda = new aws.Lambda({region: region, apiVersion: '2015-03-31'})\r\n\r\nvar resp\r\n\r\nfunction fetch(path, method) {\r\n  var pullParams = {\r\n    FunctionName: 'Aileron',\r\n    InvocationType: 'RequestResponse',\r\n    LogType: 'None',\r\n    method: method,\r\n    path: path,\r\n    authToken: 'db79d35b-762a-4ec8-b74e-50517a18c724'\r\n  }\r\n\r\n  var response = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      lambda.invoke(pullParams, function(error, data) {\r\n        if (error) {\r\n          console.log(error)\r\n          reject(null)\r\n        } else {\r\n          resolve(JSON.parse(data.Payload))\r\n        }\r\n      })\r\n    }, 2000 )\r\n  })\r\n\r\n  response.then(\r\n    // Log the fulfillment value\r\n    function(val) {\r\n      resp = val\r\n    })\r\n    .catch(\r\n      // Log the rejection reason\r\n      (reason) => {\r\n        return reason\r\n      })\r\n}\r\n\r\nfunction getTimelines() {\r\n  fetch(\"/Timeline/GetTimelines\", \"GET\")\r\n  return resp\r\n}\r\n\r\nexport {getTimelines}\r\n"]}]}